// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elangreza14/minipulsa/api-gateway/port (interfaces: AuthenticationRepo)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	minipulsa "github.com/elangreza14/minipulsa/api-gateway/adapter/grpc/minipulsa"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthenticationRepo is a mock of AuthenticationRepo interface.
type MockAuthenticationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationRepoMockRecorder
}

// MockAuthenticationRepoMockRecorder is the mock recorder for MockAuthenticationRepo.
type MockAuthenticationRepoMockRecorder struct {
	mock *MockAuthenticationRepo
}

// NewMockAuthenticationRepo creates a new mock instance.
func NewMockAuthenticationRepo(ctrl *gomock.Controller) *MockAuthenticationRepo {
	mock := &MockAuthenticationRepo{ctrl: ctrl}
	mock.recorder = &MockAuthenticationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationRepo) EXPECT() *MockAuthenticationRepoMockRecorder {
	return m.recorder
}

// LoginRegister mocks base method.
func (m *MockAuthenticationRepo) LoginRegister(arg0 context.Context, arg1 *minipulsa.LoginRegisterRequest, arg2 ...grpc.CallOption) (*minipulsa.LoginRegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginRegister", varargs...)
	ret0, _ := ret[0].(*minipulsa.LoginRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginRegister indicates an expected call of LoginRegister.
func (mr *MockAuthenticationRepoMockRecorder) LoginRegister(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginRegister", reflect.TypeOf((*MockAuthenticationRepo)(nil).LoginRegister), varargs...)
}

// ValidateToken mocks base method.
func (m *MockAuthenticationRepo) ValidateToken(arg0 context.Context, arg1 *minipulsa.ValidateTokenRequest, arg2 ...grpc.CallOption) (*minipulsa.ValidateTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateToken", varargs...)
	ret0, _ := ret[0].(*minipulsa.ValidateTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthenticationRepoMockRecorder) ValidateToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthenticationRepo)(nil).ValidateToken), varargs...)
}
