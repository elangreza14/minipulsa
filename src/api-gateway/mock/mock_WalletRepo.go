// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elangreza14/minipulsa/api-gateway/port (interfaces: WalletRepo)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	minipulsa "github.com/elangreza14/minipulsa/api-gateway/adapter/grpc/minipulsa"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockWalletRepo is a mock of WalletRepo interface.
type MockWalletRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepoMockRecorder
}

// MockWalletRepoMockRecorder is the mock recorder for MockWalletRepo.
type MockWalletRepoMockRecorder struct {
	mock *MockWalletRepo
}

// NewMockWalletRepo creates a new mock instance.
func NewMockWalletRepo(ctrl *gomock.Controller) *MockWalletRepo {
	mock := &MockWalletRepo{ctrl: ctrl}
	mock.recorder = &MockWalletRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepo) EXPECT() *MockWalletRepoMockRecorder {
	return m.recorder
}

// GetWalletDetail mocks base method.
func (m *MockWalletRepo) GetWalletDetail(arg0 context.Context, arg1 *minipulsa.GetWalletDetailRequest, arg2 ...grpc.CallOption) (*minipulsa.GetWalletDetailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWalletDetail", varargs...)
	ret0, _ := ret[0].(*minipulsa.GetWalletDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletDetail indicates an expected call of GetWalletDetail.
func (mr *MockWalletRepoMockRecorder) GetWalletDetail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletDetail", reflect.TypeOf((*MockWalletRepo)(nil).GetWalletDetail), varargs...)
}

// UseWallet mocks base method.
func (m *MockWalletRepo) UseWallet(arg0 context.Context, arg1 *minipulsa.UseWalletRequest, arg2 ...grpc.CallOption) (*minipulsa.UseWalletResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UseWallet", varargs...)
	ret0, _ := ret[0].(*minipulsa.UseWalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseWallet indicates an expected call of UseWallet.
func (mr *MockWalletRepoMockRecorder) UseWallet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseWallet", reflect.TypeOf((*MockWalletRepo)(nil).UseWallet), varargs...)
}
