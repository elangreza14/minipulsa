// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elangreza14/minipulsa/api-gateway/core/authentication (interfaces: AuthenticationService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/elangreza14/minipulsa/api-gateway/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticationService is a mock of AuthenticationService interface.
type MockAuthenticationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServiceMockRecorder
}

// MockAuthenticationServiceMockRecorder is the mock recorder for MockAuthenticationService.
type MockAuthenticationServiceMockRecorder struct {
	mock *MockAuthenticationService
}

// NewMockAuthenticationService creates a new mock instance.
func NewMockAuthenticationService(ctrl *gomock.Controller) *MockAuthenticationService {
	mock := &MockAuthenticationService{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationService) EXPECT() *MockAuthenticationServiceMockRecorder {
	return m.recorder
}

// LoginRegister mocks base method.
func (m *MockAuthenticationService) LoginRegister(arg0 context.Context, arg1 entity.HTTPReqPostPutUser) (string, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginRegister", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginRegister indicates an expected call of LoginRegister.
func (mr *MockAuthenticationServiceMockRecorder) LoginRegister(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginRegister", reflect.TypeOf((*MockAuthenticationService)(nil).LoginRegister), arg0, arg1)
}

// ValidateToken mocks base method.
func (m *MockAuthenticationService) ValidateToken(arg0 context.Context, arg1 string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthenticationServiceMockRecorder) ValidateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthenticationService)(nil).ValidateToken), arg0, arg1)
}
