// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elangreza14/minipulsa/api-gateway/core/wallet (interfaces: WalletService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/elangreza14/minipulsa/api-gateway/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// UseWallet mocks base method.
func (m *MockWalletService) UseWallet(arg0 context.Context, arg1 entity.HTTPReqPostUseWallet, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseWallet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseWallet indicates an expected call of UseWallet.
func (mr *MockWalletServiceMockRecorder) UseWallet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseWallet", reflect.TypeOf((*MockWalletService)(nil).UseWallet), arg0, arg1, arg2)
}
