// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elangreza14/minipulsa/order/core/order (interfaces: OrderRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/elangreza14/minipulsa/order/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockOrderRepository) GetOrder(arg0 context.Context, arg1 int64) (*entity.DBOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(*entity.DBOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderRepositoryMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetOrder), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockOrderRepository) GetOrders(arg0 context.Context, arg1 int64) (*[]entity.DBOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].(*[]entity.DBOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepositoryMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetOrders), arg0, arg1)
}

// InsertOrder mocks base method.
func (m *MockOrderRepository) InsertOrder(arg0 context.Context, arg1 entity.ReqCreateOrder, arg2 entity.OrderStatus) (*entity.DBOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.DBOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockOrderRepositoryMockRecorder) InsertOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockOrderRepository)(nil).InsertOrder), arg0, arg1, arg2)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepository) UpdateOrder(arg0 context.Context, arg1 entity.ReqUpdateOrder) (*entity.DBOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(*entity.DBOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrder), arg0, arg1)
}
